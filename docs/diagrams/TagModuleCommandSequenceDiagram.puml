@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":ModulePlannerParser" as ModulePlannerParser LOGIC_COLOR
participant ":TagModuleCommandParser" as TagModuleCommandParser LOGIC_COLOR
participant "a:TagModuleCommand" as TagModuleCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

box ModulePlanner MODULE_PLANNER_COLOR_T1
participant ":ModulePlanner" as ModulePlanner MODULE_PLANNER_COLOR
end box

box StudyPlan STUDY_PLAN_COLOR_T1
participant ":ActiveStudyPlan" as StudyPlan STUDY_PLAN_COLOR
end box

box UserTag TAG_COLOR_T1
participant ":UserTag" as UserTag TAG_COLOR
end box

box Module MODULE_COLOR_T1
participant ":Module" as Module MODULE_COLOR
end box

box UniqueTagList #d1b9a8
participant ":ModuleTagList" as ModuleTagList #bd9870
participant ":StudyPlanTagList" as StudyPlanTagList #bd9870
end box

[-> LogicManager : execute("addtag someModuleCode someTagName")
activate LogicManager

LogicManager -> ModulePlannerParser : parseCommand("addtag some ModuleCode someTagName")
activate ModulePlannerParser

create TagModuleCommandParser
ModulePlannerParser -> TagModuleCommandParser
activate TagModuleCommandParser

TagModuleCommandParser --> ModulePlannerParser
deactivate TagModuleCommandParser

ModulePlannerParser -> TagModuleCommandParser : parse("someModuleCode someTagName")
activate TagModuleCommandParser

create TagModuleCommand
TagModuleCommandParser -> TagModuleCommand
activate TagModuleCommand

TagModuleCommand --> TagModuleCommandParser : a
deactivate TagModuleCommand

TagModuleCommandParser --> ModulePlannerParser : a
deactivate TagModuleCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
TagModuleCommandParser -[hidden]-> ModulePlannerParser
destroy TagModuleCommandParser

ModulePlannerParser --> LogicManager : a
deactivate ModulePlannerParser

LogicManager -> TagModuleCommand : execute()
activate TagModuleCommand

TagModuleCommand -> Model : activeSpContainsTag(someTagName)
activate Model

Model -> ModulePlanner : activeSpContainsTag(someTagName)
activate ModulePlanner

ModulePlanner -> StudyPlan : containsTag(someTagName)
activate StudyPlan

StudyPlan -> StudyPlanTagList : containsTag(someTagName)
activate StudyPlanTagList

StudyPlanTagList --> StudyPlan : containsTag
deactivate StudyPlanTagList

StudyPlan --> ModulePlanner : containsTag
deactivate StudyPlan

ModulePlanner --> Model : containsTag
deactivate ModulePlanner

Model --> TagModuleCommand : containsTag
deactivate Model

alt active study plan contains tag
    TagModuleCommand -> Model: getTagFromActiveSp(someTagName)
    activate Model

    Model -> ModulePlanner : getTagFromActiveSp(someTagName)
    activate ModulePlanner

    ModulePlanner -> StudyPlan : getTagFromActiveSp(someTagName)
    activate StudyPlan

    StudyPlan -> StudyPlanTagList : getTag(someTagName)
    activate StudyPlanTagList

    StudyPlanTagList --> StudyPlan : toAdd
    deactivate StudyPlanTagList

    StudyPlan --> ModulePlanner : toAdd
    deactivate StudyPlan

    ModulePlanner --> Model : toAdd
    deactivate ModulePlanner

    Model --> TagModuleCommand : toAdd
    deactivate Model

else else
    create UserTag
    TagModuleCommand -> UserTag : createNewTag()
    activate UserTag

    UserTag --> TagModuleCommand : toAdd
    deactivate UserTag

end

TagModuleCommand -> Model : addTagToActiveSp(toAdd, someModuleCode)
activate Model

Model -> ModulePlanner : addTagToActiveSp(toAdd, someModuleCode)
activate ModulePlanner

ModulePlanner -> StudyPlan : addTag(toAdd, someModuleCode)
activate StudyPlan

StudyPlan -> Module: addTag(toAdd)
activate Module

Module -> Module : hasTag(toAdd)
activate Module

Module -> ModuleTagList : containsTag(toAdd)
activate ModuleTagList

ModuleTagList --> Module: hasTag
deactivate Module

opt hasTag
    Module -> ModuleTagList : addTag(toAdd)
    activate ModuleTagList
    deactivate ModuleTagList
end

Module --> StudyPlan: added
deactivate Module

StudyPlan --> ModulePlanner : added
deactivate StudyPlan

ModulePlanner --> Model : added
deactivate ModulePlanner

Model --> TagModuleCommand : added
deactivate Model

opt added
    create CommandResult
    TagModuleCommand -> CommandResult
    activate CommandResult

    CommandResult --> TagModuleCommand
    deactivate CommandResult

    TagModuleCommand --> LogicManager : result
    deactivate TagModuleCommand

    [<--LogicManager
    deactivate LogicManager
end

@enduml
